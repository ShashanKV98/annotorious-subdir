import type { Annotation } from './Annotation';
import type { User } from './User';
import type { PresenceProvider } from '../presence/PresenceProvider';
import { type HoverState, type SelectionState, type Store, type UndoStack, type ViewportState } from '../state';
import type { LifecycleEvents } from '../lifecycle/LifecycleEvents';
import { type FormatAdapter } from './FormatAdapter';
import type { DrawingStyle } from './DrawingStyle';
import type { Filter } from './Filter';
/**
 * Base annotator interface.
 * I ... internal core data model
 * E ... external adapted representation
 */
export interface Annotator<I extends Annotation = Annotation, E extends unknown = Annotation> {
    addAnnotation(annotation: E): void;
    cancelSelected(): void;
    canRedo(): boolean;
    canUndo(): boolean;
    clearAnnotations(): void;
    destroy(): void;
    getAnnotationById(id: string): E | undefined;
    getAnnotations(): E[];
    getSelected(): E[];
    getUser(): User;
    loadAnnotations(url: string): Promise<E[]>;
    redo(): void;
    removeAnnotation(arg: E | string): E;
    setAnnotations(annotations: E[]): void;
    setFilter(filter: Filter): void;
    setPresenceProvider?(provider: PresenceProvider): void;
    setSelected(arg?: string | string[]): void;
    setStyle(arg: DrawingStyle | ((annotation: I) => DrawingStyle) | undefined): void;
    setUser(user: User): void;
    undo(): void;
    updateAnnotation(annotation: E): E;
    on<T extends keyof LifecycleEvents<E>>(event: T, callback: LifecycleEvents<E>[T]): void;
    off<T extends keyof LifecycleEvents<E>>(event: T, callback: LifecycleEvents<E>[T]): void;
    state: AnnotatorState<I>;
}
export interface AnnotatorState<A extends Annotation> {
    store: Store<A>;
    selection: SelectionState<A>;
    hover: HoverState<A>;
    viewport: ViewportState;
}
export declare const createBaseAnnotator: <I extends Annotation, E extends unknown>(state: AnnotatorState<I>, undoStack: UndoStack<I>, adapter?: FormatAdapter<I, E>) => {
    addAnnotation: (annotation: E) => void;
    cancelSelected: () => void;
    canRedo: () => boolean;
    canUndo: () => boolean;
    clearAnnotations: () => void;
    getAnnotationById: (id: string) => E;
    getAnnotations: () => E[];
    getSelected: () => E[];
    loadAnnotations: (url: string) => Promise<any>;
    redo: () => void;
    removeAnnotation: (arg: string | E) => E;
    setAnnotations: (annotations: E[]) => void;
    setSelected: (arg?: string | string[]) => void;
    undo: () => void;
    updateAnnotation: (updated: E) => E;
};
//# sourceMappingURL=Annotator.d.ts.map