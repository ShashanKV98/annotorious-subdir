import type { Annotation, AnnotationBody, AnnotationTarget } from '../model';
import { Origin } from './StoreObserver';
import type { StoreChangeEvent, StoreObserveOptions } from './StoreObserver';
type AnnotationBodyIdentifier = {
    id: string;
    annotation: string;
};
export type Store<T extends Annotation> = ReturnType<typeof createStore<T>>;
export declare const createStore: <T extends Annotation>() => {
    addAnnotation: (annotation: T, origin?: Origin) => void;
    addBody: (body: AnnotationBody, origin?: Origin) => void;
    all: () => T[];
    bulkAddAnnotation: (annotations: T[], replace?: boolean, origin?: Origin) => void;
    bulkDeleteAnnotation: (annotationsOrIds: (string | T)[], origin?: Origin) => void;
    bulkUpdateAnnotation: (annotations: T[], origin?: Origin) => void;
    bulkUpdateBodies: (bodies: AnnotationBody[], origin?: Origin) => void;
    bulkUpdateTargets: (targets: AnnotationTarget[], origin?: Origin) => void;
    clear: (origin?: Origin) => void;
    deleteAnnotation: (annotationOrId: string | T, origin?: Origin) => void;
    deleteBody: (body: AnnotationBodyIdentifier, origin?: Origin) => void;
    getAnnotation: (id: string) => T;
    getBody: (id: string) => AnnotationBody | undefined;
    observe: (onChange: (event: StoreChangeEvent<T>) => void, options?: StoreObserveOptions) => number;
    unobserve: (onChange: (event: StoreChangeEvent<T>) => void) => void;
    updateAnnotation: (arg1: string | T, arg2?: Origin | T, arg3?: Origin) => void;
    updateBody: (oldBodyId: AnnotationBodyIdentifier, newBody: AnnotationBody, origin?: Origin) => void;
    updateTarget: (target: AnnotationTarget, origin?: Origin) => void;
};
export {};
//# sourceMappingURL=Store.d.ts.map