import type { Annotation, Annotator, AnnotatorState } from '../model';
import type { Store } from './Store';
import type { StoreChangeEvent } from './StoreObserver';
type Subscriber<T extends Annotation> = (annotation: T[]) => void;
export interface SvelteStore<T extends Annotation> extends Store<T> {
    subscribe(onChange: Subscriber<T>): void;
}
export interface SvelteAnnotatorState<T extends Annotation> extends AnnotatorState<T> {
    store: SvelteStore<T>;
}
export interface SvelteAnnotator<T extends Annotation> extends Annotator<T> {
    state: SvelteAnnotatorState<T>;
}
/**
 * A simple wrapper around the event-based store implementation
 * that adds a Svelte shim, for use with the reactive '$' notation.
 * Other frameworks might not actually need this. But it's pretty
 * convenient for everyone using Svelte, as well as for the
 * basic (Svelte-based) Annotorious standard implementation.
 */
export declare const toSvelteStore: <T extends Annotation>(store: {
    addAnnotation: (annotation: T, origin?: import("./StoreObserver").Origin) => void;
    addBody: (body: import("../model").AnnotationBody, origin?: import("./StoreObserver").Origin) => void;
    all: () => T[];
    bulkAddAnnotation: (annotations: T[], replace?: boolean, origin?: import("./StoreObserver").Origin) => void;
    bulkDeleteAnnotation: (annotationsOrIds: (string | T)[], origin?: import("./StoreObserver").Origin) => void;
    bulkUpdateAnnotation: (annotations: T[], origin?: import("./StoreObserver").Origin) => void;
    bulkUpdateBodies: (bodies: import("../model").AnnotationBody[], origin?: import("./StoreObserver").Origin) => void;
    bulkUpdateTargets: (targets: import("../model").AnnotationTarget[], origin?: import("./StoreObserver").Origin) => void;
    clear: (origin?: import("./StoreObserver").Origin) => void;
    deleteAnnotation: (annotationOrId: string | T, origin?: import("./StoreObserver").Origin) => void;
    deleteBody: (body: {
        id: string;
        annotation: string;
    }, origin?: import("./StoreObserver").Origin) => void;
    getAnnotation: (id: string) => T;
    getBody: (id: string) => import("../model").AnnotationBody;
    observe: (onChange: (event: StoreChangeEvent<T>) => void, options?: import("./StoreObserver").StoreObserveOptions) => number;
    unobserve: (onChange: (event: StoreChangeEvent<T>) => void) => void;
    updateAnnotation: (arg1: string | T, arg2?: import("./StoreObserver").Origin | T, arg3?: import("./StoreObserver").Origin) => void;
    updateBody: (oldBodyId: {
        id: string;
        annotation: string;
    }, newBody: import("../model").AnnotationBody, origin?: import("./StoreObserver").Origin) => void;
    updateTarget: (target: import("../model").AnnotationTarget, origin?: import("./StoreObserver").Origin) => void;
}) => SvelteStore<T>;
export {};
//# sourceMappingURL=SvelteStore.d.ts.map