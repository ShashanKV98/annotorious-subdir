import { type Unsubscribe } from 'nanoevents';
import type { Annotation } from '../model';
import type { Store } from './Store';
import { Origin } from './StoreObserver';
import { type ChangeSet, type StoreChangeEvent } from './StoreObserver';
export interface UndoStack<T extends Annotation> {
    canRedo(): boolean;
    canUndo(): boolean;
    destroy(): void;
    on<E extends keyof UndoStackEvents<T>>(event: E, callback: UndoStackEvents<T>[E]): Unsubscribe;
    undo(): void;
    redo(): void;
}
export interface UndoStackEvents<T extends Annotation> {
    redo(change: ChangeSet<T>): void;
    undo(change: ChangeSet<T>): void;
}
export declare const createUndoStack: <T extends Annotation>(store: {
    addAnnotation: (annotation: T, origin?: Origin) => void;
    addBody: (body: import("../model").AnnotationBody, origin?: Origin) => void;
    all: () => T[];
    bulkAddAnnotation: (annotations: T[], replace?: boolean, origin?: Origin) => void;
    bulkDeleteAnnotation: (annotationsOrIds: (string | T)[], origin?: Origin) => void;
    bulkUpdateAnnotation: (annotations: T[], origin?: Origin) => void;
    bulkUpdateBodies: (bodies: import("../model").AnnotationBody[], origin?: Origin) => void;
    bulkUpdateTargets: (targets: import("../model").AnnotationTarget[], origin?: Origin) => void;
    clear: (origin?: Origin) => void;
    deleteAnnotation: (annotationOrId: string | T, origin?: Origin) => void;
    deleteBody: (body: {
        id: string;
        annotation: string;
    }, origin?: Origin) => void;
    getAnnotation: (id: string) => T;
    getBody: (id: string) => import("../model").AnnotationBody;
    observe: (onChange: (event: StoreChangeEvent<T>) => void, options?: import("./StoreObserver").StoreObserveOptions) => number;
    unobserve: (onChange: (event: StoreChangeEvent<T>) => void) => void;
    updateAnnotation: (arg1: string | T, arg2?: Origin | T, arg3?: Origin) => void;
    updateBody: (oldBodyId: {
        id: string;
        annotation: string;
    }, newBody: import("../model").AnnotationBody, origin?: Origin) => void;
    updateTarget: (target: import("../model").AnnotationTarget, origin?: Origin) => void;
}) => UndoStack<T>;
//# sourceMappingURL=UndoStack.d.ts.map