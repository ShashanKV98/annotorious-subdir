import type { Annotation } from '../model';
import type { Store } from './Store';
export type HoverState<T extends Annotation> = ReturnType<typeof createHoverState<T>>;
export declare const createHoverState: <T extends Annotation>(store: {
    addAnnotation: (annotation: T, origin?: import("./StoreObserver").Origin) => void;
    addBody: (body: import("../model").AnnotationBody, origin?: import("./StoreObserver").Origin) => void;
    all: () => T[];
    bulkAddAnnotation: (annotations: T[], replace?: boolean, origin?: import("./StoreObserver").Origin) => void;
    bulkDeleteAnnotation: (annotationsOrIds: (string | T)[], origin?: import("./StoreObserver").Origin) => void;
    bulkUpdateAnnotation: (annotations: T[], origin?: import("./StoreObserver").Origin) => void;
    bulkUpdateBodies: (bodies: import("../model").AnnotationBody[], origin?: import("./StoreObserver").Origin) => void;
    bulkUpdateTargets: (targets: import("../model").AnnotationTarget[], origin?: import("./StoreObserver").Origin) => void;
    clear: (origin?: import("./StoreObserver").Origin) => void;
    deleteAnnotation: (annotationOrId: string | T, origin?: import("./StoreObserver").Origin) => void;
    deleteBody: (body: {
        id: string;
        annotation: string;
    }, origin?: import("./StoreObserver").Origin) => void;
    getAnnotation: (id: string) => T;
    getBody: (id: string) => import("../model").AnnotationBody;
    observe: (onChange: (event: import("./StoreObserver").StoreChangeEvent<T>) => void, options?: import("./StoreObserver").StoreObserveOptions) => number;
    unobserve: (onChange: (event: import("./StoreObserver").StoreChangeEvent<T>) => void) => void;
    updateAnnotation: (arg1: string | T, arg2?: import("./StoreObserver").Origin | T, arg3?: import("./StoreObserver").Origin) => void;
    updateBody: (oldBodyId: {
        id: string;
        annotation: string;
    }, newBody: import("../model").AnnotationBody, origin?: import("./StoreObserver").Origin) => void;
    updateTarget: (target: import("../model").AnnotationTarget, origin?: import("./StoreObserver").Origin) => void;
}) => {
    readonly current: string;
    subscribe: (this: void, run: import("svelte/store").Subscriber<string>, invalidate?: (value?: string) => void) => import("svelte/store").Unsubscriber;
    set: (this: void, value: string) => void;
};
//# sourceMappingURL=Hover.d.ts.map